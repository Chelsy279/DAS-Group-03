rat_summary <- rat_samples_df%>%group_by(Parameter)%>%summarize(Expectation=mean(value),`Lower 95% interval`=quantile(value,0.025),Median=median(value),`Upper 95% interval`=quantile(value,0.975),
`Standard error`=sd(value))
library(dplyr)
rat_summary <- rat_samples_df%>%group_by(Parameter)%>%summarise(Expectation=mean(value),`Lower 95% interval`=quantile(value,0.025),Median=median(value),`Upper 95% interval`=quantile(value,0.975),
`Standard error`=sd(value))
rat_summary%>%filter(Parameter%in%c('alpha','beta','theta[71]'))%>%kable(digits=3)%>%kable_styling()
ggplot(rat_samples_df%>%filter(Parameter%in%c('alpha','beta','theta[71]')),
aes(x = value)) + geom_density(adjust=2) +
facet_wrap(~Parameter,scales='free')+
labs(x = 'Posterior samples',y='Density')
# Joint posterior density of alpha and beta.
ggplot(data.frame(x=rat_samples[,'alpha'],y=rat_samples[,'beta']),aes(x = x,y = y)) +
geom_point()+
geom_density_2d(adjust=2) +
labs(x = expression(alpha),y=expression(beta),title='Posterior samples')
# Task
school_code <- nimbleCode({
for(j in 1:J){
y_bar[j] ~ dnorm(theta[j],sd=sigma[j])
theta[j] ~ dnorm(mu,sd=tau)
}
mu ~ dnorm(0,sd=10)
tau ~ T(dnorm(0,sd=10),0,)
})
library(nimble)
# Task
school_code <- nimbleCode({
for(j in 1:J){
y_bar[j] ~ dnorm(theta[j],sd=sigma[j])
theta[j] ~ dnorm(mu,sd=tau)
}
mu ~ dnorm(0,sd=10)
tau ~ T(dnorm(0,sd=10),0,)
})
# 2b
school_init_fun <- function(){
return(list(mu=rnorm(1,0,1),tau=rexp(1),theta=rnorm(J,0,1)))
}
# Task
school_samples <- nimbleMCMC(
code = school_code,
constants = school_constants,
data = school_data,
inits = school_init_fun,
monitors = c('mu','tau','theta'),
niter = 100000,
setSeed = 543890,
nburnin = 80000
)
# Task
school_samples <- nimbleMCMC(
code = school_code,
constants = school_constants,
data = school_data,
inits = school_init_fun,
monitors = c('mu','tau','theta'),
niter = 100000,
setSeed = 543890,
nburnin = 80000
)
# 2b
school_init_fun <- function(){
return(list(mu=rnorm(1,0,1),tau=rexp(1),theta=rnorm(J,0,1)))
}
# Task
school_samples <- nimbleMCMC(
code = school_code,
constants = school_constants,
data = school_data,
inits = school_init_fun,
monitors = c('mu','tau','theta'),
niter = 100000,
setSeed = 543890,
nburnin = 80000
)
return(list(mu=rnorm(1,0,1),tau=rexp(1),theta=rnorm(1,0,1)))
# Exercise 2
# 2a
J <- 8 # Number of schools.
y_bar <- c(28, 8, -3, 7, -1, 1, 18, 12)
sigma <- c(15, 10, 16, 11, 9, 11, 10, 18)
school_constants <- list(sigma=sigma,J=J)
school_data <- list(y_bar=y_bar)
# Task
school_code <- nimbleCode({
for(j in 1:J){
y_bar[j] ~ dnorm(theta[j],sd=sigma[j])
theta[j] ~ dnorm(mu,sd=tau)
}
mu ~ dnorm(0,sd=10)
tau ~ T(dnorm(0,sd=10),0,)
})
# 2b
school_init_fun <- function(){
return(list(mu=rnorm(1,0,1),tau=rexp(1),theta=rnorm(1,0,1)))
}
# Task
school_samples <- nimbleMCMC(
code = school_code,
constants = school_constants,
data = school_data,
inits = school_init_fun,
monitors = c('mu','tau','theta'),
niter = 100000,
setSeed = 543890,
nburnin = 80000
)
# Separate out the samples of the thetas.
theta_samples <- school_samples[,paste('theta[',1:J,']',sep='')]
# Probability that School A is more effective than School B.
mean(theta_samples[,1]>theta_samples[,3])
# Probability that School A is most effective.
mean(theta_samples[,1]>apply(theta_samples[,-1],1,max))
# Probability that School A is least effective.
mean(theta_samples[,1]<apply(theta_samples[,-1],1,min))
n_samples <- nrow(school_samples) # Number of saved MCMC samples.
mu_samples <- school_samples[,'mu']
tau_samples <- school_samples[,'tau']
theta_predictive_samples <- rnorm(n_samples,mu_samples,tau_samples)
# Probability that a School effective has a magnitude greater than 10.
mean(abs(theta_predictive_samples)>10)
theta_predictive_prob_data <- data.frame(x=0:30,p=sapply(0:30,function(x)mean(abs(theta_predictive_samples)>x)))
ggplot(theta_predictive_prob_data,aes(x=x,y=p))+geom_line()+
labs(x='School effect magnitude',y='Probability of exceedance')
library(ggplot2)
ggplot(theta_predictive_prob_data,aes(x=x,y=p))+geom_line()+
labs(x='School effect magnitude',y='Probability of exceedance')
# Exercise 1
# Q1
set.seed(1)
USArrests <- data.frame(scale(USArrests))
usarr.kcl <- kmeans(USArrests, centers=3, nstart=100)
# Q2
plot(USArrests, col = usarr.kcl$cluster)
# Q3
# get cluster means
aggregate(USArrests,by=list(usarr.kcl$cluster),FUN=mean)
# append cluster assignment
USArrests_cl <- data.frame(USArrests, usarr.kcl$cluster)
# Q4
library(cluster)
clusplot(USArrests_cl, usarr.kcl$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
# Q5
library(fpc)
set.seed(1)
usarr.kcl.3 <- kmeans(USArrests, centers=3, nstart=100)
usarr.kcl.5 <- kmeans(USArrests, centers=5, nstart=100)
d <- dist(USArrests)
cl.stats <- cluster.stats(d, usarr.kcl.3$cluster, usarr.kcl.5$cluster)
round(cl.stats$corrected.rand,digits=2)
# Q6
library(cluster)
usarrests.kmeans.2 <- kmeans(USArrests, centers=2, iter.max=1000)
usarrests.kmeans.3 <- kmeans(USArrests, centers=3, iter.max=1000)
si.k2 <- silhouette(usarrests.kmeans.2$cluster, dist(USArrests))
si.k3 <- silhouette(usarrests.kmeans.3$cluster, dist(USArrests))
par(mfrow=c(1,2))
plot(si.k2, col = c("red", "green"), main = "silhouette plot when k=2")
plot(si.k3, col = c("red", "green", "blue"), main = "silhouette plot when k=3")
library(factoextra)
ggplot_fviz_sil <-fviz_nbclust(USArrests, FUN=kmeans, method = "silhouette")
ggplot_fviz_sil #average siluhouette; the higher the better
# Q7
set.seed(1)
K_max <- 15 #maximum number of clusters
wss <- rep(NA, K_max)
for (i in 2:K_max){
usarrests.kmeans <- kmeans(USArrests, centers=i, nstart=100)
wss[i] <- usarrests.kmeans$tot.withinss
}
wss[1] <- usarrests.kmeans$totss
plot(1:K_max, wss, type="b", pch=20, cex=1.5, cex.main=0.9,
xlab="Number of clusters", ylab="Within-cluster sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method")
ggplot_fviz_wss <- fviz_nbclust(USArrests, FUN=kmeans, nstart=100, method = "wss")
ggplot_fviz_wss #total within sum of square; same as the Elbow method, look at the knee
library(igraph)
df1 <- data.frame(
A=c(1, 1, 2, 3, 3, 4, 4, 5, 5, 7, 8, 8),
B=c(2, 4, 3, 4, 5, 4, 5, 6, 7, 8, 8, 9)
)
g1 <- graph.data.frame(d=df1, directed=FALSE)
plot(g1)
## Degree of nodes
degree(df1)
## Degree of nodes
degree(g1)
## Degree centrality
degree(g1)/(9-1)
df2 <- data.frame(
A=c(1,2,2,2,4,4,5,6),
B=c(2,3,4,7,5,6,6,7)
)
g2 <- graph.data.frame(d=df2, directed=FALSE)
plot(g2)
## Closeness centrality
closeness(g2)
d3 <- data.frame(
A=c(1,2,3,3,4,5),
B=c(2,3,4,5,5,6)
)
g3 <- graph.data.frame(d=d3, directed=FALSE)
plot(g3)
## Betweenness centrality
betweenness(g3)
## Normalized betweenness centrality
betweenness(g3, directed=FALSE, normalized=TRUE)
df4 <- data.frame(
A=c(1,1,1,2,2,3,3,4,5,6,6,7),
B=c(2,4,5,3,5,4,5,5,6,7,8,8)
)
g4 <- graph.data.frame(d=df4, directed=FALSE)
plot(g4)
df4 <- data.frame(
A=c(1,1,1,1,2,2,3,3,4,5,6,6,7),
B=c(2,4,5,3,3,5,4,5,5,6,7,8,8)
)
g4 <- graph.data.frame(d=df4, directed=FALSE)
plot(g4)
df4 <- data.frame(
A=c(1,1,1,2,2,3,3,4,5,6,6,7),
B=c(2,4,5,3,5,4,5,5,6,7,8,8)
)
g4 <- graph.data.frame(d=df4, directed=FALSE)
plot(g4)
df4 <- data.frame(
A=c(1,1,1,2,2,3,3,4,4,6,6,7),
B=c(2,4,5,3,5,4,5,5,6,7,8,8)
)
g4 <- graph.data.frame(d=df4, directed=FALSE)
plot(g4)
## Count number of cliques
table(sapply(cliques(g4), length))
## Count number of maximal cliques
table(sapply(maximal.cliques(g4), length))
## Count number of maximal cliques
table(sapply(max.cliques(g4), length))
## Count number of maximal cliques
table(sapply(max_cliques(g4), length))
df5 <- data.frame(
A=c(1,1,2,2,2,3,3,3,4,5,6,6,7,7,8,9),
B=c(2,5,3,4,5,4,7,9,6,6,7,8,8,9,10,10)
)
g5 <- graph.data.frame(d=df5, directed=FALSE)
plot(g5)
## Density of graph (equal to 16/35)
graph.density(g5)
## Density of graph (equal to 16/35)
edge_density(g5)
library(bnlearn)
bn.model <- model2network("[L|G][G|I:D][S|I][D][I]")
plot(bn.model)
## CPD of node D
cpd.D <- matrix(c(0.6, 0.4), ncol=2, dimnames=list(NULL, c("easy", "difficult")))
cpd.D
## CPD of node I
cpd.I <- matrix(c(0.7, 0.3), ncol=2, dimnames=list(NULL, c("baseline", "high")))
cpd.I
## CPD of node G
cpd.G <- c(0.3, 0.4, 0.3, 0.05, 0.25, 0.7, 0.9, 0.08, 0.02, 0.5, 0.3, 0.2)
dim(cpd.G) <- c(3, 2, 2)
dimnames(cpd.G) <- list("G"=c("A", "B", "C"), "D"=c("easy", "difficult"), "I"=c("baseline", "high"))
cpd.G
## CPD of node S
cpd.S <- matrix(c(0.95,0.05,0.2,0.8), ncol=2, dimnames=list("S"=c("low", "high"), "I"=c("baseline", "high")))
cpd.S
## CPD of node S
cpd.S <- matrix(c(0.95,0.2,0.05,0.8), ncol=2, dimnames=list("S"=c("low", "high"), "I"=c("baseline", "high")))
cpd.S
## CPD of node L
cpd.L <- matrix(
c(0.1,0.9,0.4,0.6,0.99,0.01),
ncol=3,
dimnames=list("L"=c("negative", "positive"), "G"=c("A", "B", "C"))
)
cpd.L
bn.fitted <- custom.fit(bn.model, dist=list(D=cpd.D, I=cpd.I, G=cpd.G, S=cpd.S, L=cpd.L))
## CPD of node S
cpd.S <- matrix(c(0.95,0.2,0.05,0.8), ncol=2, dimnames=list("S"=c("low", "high"), "I"=c("baseline", "high")))
cpd.S
bn.fitted <- custom.fit(bn.model, dist=list(D=cpd.D, I=cpd.I, G=cpd.G, S=cpd.S, L=cpd.L))
## CPD of node S
cpd.S <- matrix(c(0.95,0.05,0.2,0.8), ncol=2, dimnames=list("S"=c("low", "high"), "I"=c("baseline", "high")))
cpd.S
bn.fitted <- custom.fit(bn.model, dist=list(D=cpd.D, I=cpd.I, G=cpd.G, S=cpd.S, L=cpd.L))
bn.fitted
cpquery(bn.fitted, event=(D=="easy"), evidence=TRUE)
cpquery(bn.fitted, event=(G=="A"), evidence=TRUE)
cpquery(bn.fitted, event=(D=="easy" & L=="negative"), evidence=(D=="A"))
cpquery(bn.fitted, event=(D=="easy" & I=="baseline"), evidence=(D=="A"))
cpquery(bn.fitted, event=(D=="easy" & I=="baseline"), evidence=(G=="A"))
cpquery(bn.fitted, event=(D=="difficult" & I=="baseline"), evidence=(G=="A"))
cpquery(bn.fitted, event=(D=="easy" & I=="baseline"), evidence=(G=="A"))
cpquery(bn.fitted, event=(L=="positive"), evidence=TRUE)
library(bnlearn)
set.seed(42)
data(coronary)
dframe <- data.frame(coronary)
bn.model <- hc(dframe)
plot(bn.model)
bn.model <- drop.arc(bn.model, from=Family, to=M.Work, debug=FALSE)
bn.model <- drop.arc(bn.model, from="Family", to="M.Work", debug=FALSE)
data(coronary)
dframe <- data.frame(coronary)
bn.model <- hc(dframe)
bn.model
bn.model <- drop.arc(bn.model, from="Family", to="M.Work", debug=FALSE)
bn.model <- drop.arc(bn.model, from="Family", to="M..Work", debug=FALSE)
plot(bn.model)
bn.fitted <- bn.fit(bn.model, data=dframe)
bn.fitted
cpquery(bn.fitted, event=(Proteins<3), evidence=(Smoking=="no"))
cpquery(bn.fitted, event=(Proteins=="<3"), evidence=(Smoking=="no"))
cpquery(bn.fitted, event=(Proteins=="<3"), evidence=(Smoking=="no" & Pressure==">140"))
cpquery(bn.fitted, event=(Pressure==">140"), evidence=(Proteins=="<3"))
library(ggplot2)
library(GGally)
library(tidyverse)
library(dplyr)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
library(ggcorrplot)
setwd("D:/UOFG/Semester 2/Data Analysis Skill/Group Project 2/DAS-Group-03")
# Read the data set
Data_FIES <- read.csv("dataset03.csv")
# Tidy the data
FIES <- Data_FIES %>%
# Place the dependent variable in the first column and delete the unique value
select(Total.Number.of.Family.members, everything(), -Region) %>%
# Convert categorical variables into factors
mutate(
Household.Head.Sex = as.factor(Household.Head.Sex),
Type.of.Household = as.factor(Type.of.Household),
Electricity = as.factor(Electricity)) %>%
# Remove Missing Values
drop_na()
str(FIES) # Check data structure
summary(FIES) # Get summary statistics of all variables
dim(FIES) # Check dataset dimensions (number of rows and columns)
#| label: tbl-y
#| tbl-cap: Summary statistics for 'Total.Number.of.Family.members'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n()
) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-y
#| fig-cap: Histogram of 'Total.Number.of.Family.members'
# Visualize dependent variable distribution
ggplot(FIES, aes(x = Total.Number.of.Family.members)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(x = "Number of Family Members", y = "Frequency")
mean <- mean(FIES$Total.Number.of.Family.members)
var <- var(FIES$Total.Number.of.Family.members)
var_ratio <- var/mean
#| label: tbl-y-sex
#| tbl-cap: Summary statistics on 'Total.Number.of.Family.members' by 'Household.Head.Sex'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n(),
.by = Household.Head.Sex) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-y-sex
#| fig-cap: Boxplot of 'Total.Number.of.Family.members' by 'Household.Head.Sex'
ggplot(FIES, aes(x = Household.Head.Sex, y = Total.Number.of.Family.members, fill = Household.Head.Sex)) +
geom_boxplot() +
labs(x = "Household Head's Gender", y = "Family Size")
#| label: tbl-y-household
#| tbl-cap: Summary statistics on 'Total.Number.of.Family.members' by 'Type.of.Household'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n(),
.by = Type.of.Household) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-y-household
#| fig-cap: Boxplot of 'Total.Number.of.Family.members' by 'Type.of.Household'
ggplot(FIES, aes(x = Type.of.Household, y = Total.Number.of.Family.members, fill = Type.of.Household)) +
geom_boxplot() +
labs(x = "Household Type", y = "Family Size")
#| label: tbl-y-electricity
#| tbl-cap: Summary statistics on 'Total.Number.of.Family.members' by 'Electricity'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n(),
.by = Electricity) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-y-electricity
#| fig-cap: Boxplot of 'Total.Number.of.Family.members' by 'Electricity'
ggplot(FIES, aes(x = Electricity, y = Total.Number.of.Family.members, fill = Electricity)) +
geom_boxplot() +
labs(x = "Electricity (0 = No, 1 = Yes)", y = "Family Size")
#| label: fig-his-num
#| fig-cap: Histograms for Numerical Variables
p1 <- ggplot(FIES, aes(x = Total.Household.Income)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Household Income Distribution", x = "Household Income", y = "Count")
p2 <- ggplot(FIES, aes(x = Total.Food.Expenditure)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Household Expenditure Distribution", x = "Household Expenditure", y = "Count")
p3 <- ggplot(FIES, aes(x = Household.Head.Age)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Household Head Age Distribution", x = "Household Head Age", y = "Count")
p4 <- ggplot(FIES, aes(x = House.Floor.Area)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "House Floor Area Distribution", x = "House Floor Area", y = "Count")
p5 <- ggplot(FIES, aes(x = House.Age)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "House Age Distribution", x = "House Age", y = "Count")
p6 <- ggplot(FIES, aes(x = Number.of.bedrooms)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Number of bedrooms Distribution", x = "Number of bedrooms", y = "Count")
(p1 | p2 | p3) / (p4 | p5 | p6)
FIES$Bedroom.Category <- cut(FIES$Number.of.bedrooms,
breaks = c(-Inf, 1, 3, 5, Inf),
labels = c("Small", "Medium", "Large", "Luxury"),
right = TRUE)
FIES$Bedroom.Category <- factor(FIES$Bedroom.Category)
model_cat <- lm(Family_Size ~ Bedroom.Category, data = FIES)
summary(model_cat)
# Convert 'Number.of.bedrooms' to categorical variable
FIES$Bedroom.Category <- cut(FIES$Number.of.bedrooms,
breaks = c(-Inf, 1, 3, 5, Inf),
labels = c("Small", "Medium", "Large", "Luxury"),
right = TRUE)
# Convert categorical variable into factor
FIES$Bedroom.Category <- factor(FIES$Bedroom.Category)
# Remove the 'Number.of.bedrooms' column
FIES <- FIES %>% select(-Number.of.bedrooms)
#| label: fig-corr-num
#| fig-cap: Heat map for numerical variables by 'Total.Number.of.Family.members'
# Select all numerical variables
numeric_vars <- FIES[, sapply(FIES, is.numeric)]
# Since our dependent variable is a count varaible, use Spearman method
cor_matrix <- cor(numeric_vars, method = "spearman")
# Plot the correlation heatmap
ggcorrplot(cor_matrix, type = "full", lab = TRUE, lab_size = 4,
colors = c("blue", "white", "orange"), outline.color = "black",
legend.title = "Correlation") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(
axis.text.x = element_text(size = 9, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 9),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
