Household.Head.Sex = as.factor(Household.Head.Sex),
Type.of.Household = as.factor(Type.of.Household),
Electricity = as.factor(Electricity)) %>%
# Remove Missing Values
drop_na()
# Convert 'Number.of.bedrooms' to categorical variable
FIES$Bedroom.Category <- cut(FIES$Number.of.bedrooms,
breaks = c(-1, 1, 3, 5, Inf),
labels = c("Small", "Medium", "Large", "Luxury"),right = TRUE)
# Convert categorical variable into factor
FIES$Bedroom.Category <- factor(FIES$Bedroom.Category)
# Remove the 'Number.of.bedrooms' column
FIES <- FIES %>% select(-Number.of.bedrooms)
#| label: fig-corr-num
#| fig-cap: Heat map for numerical variables by 'Total.Number.of.Family.members'
# Select all numerical variables
numeric_vars <- FIES[, sapply(FIES, is.numeric)]
# Since our dependent variable is a count varaible, use Spearman method
cor_matrix <- cor(numeric_vars, method = "spearman")
# Plot the correlation heatmap
ggcorrplot(cor_matrix, type = "full", lab = TRUE, lab_size = 4,
colors = c("blue", "white", "orange"), outline.color = "black",
legend.title = "Correlation") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(
axis.text.x = element_text(size = 9, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 9),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
str(FIES)
# Fit a Poisson regression model
colnames(FIES) <- c("Family_Size", "Income", "Food_Exp", "Head_Sex", "Head_Age","Household_Type", "Floor_Area", "House_Age", "Bedrooms", "Electricity")
poisson_model <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(Floor_Area) +
log(House_Age+0.1) +
Bedrooms +
Electricity,
family = poisson(link = "log"),
data = FIES)
#summary(poisson_model)
drop1(poisson_model, test = "F")
# Chunk 1
library(ggplot2)
library(GGally)
library(tidyverse)
library(dplyr)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
library(ggcorrplot)
# Chunk 2
# Read the data set
Data_FIES <- read.csv("dataset03.csv")
# Tidy the data
FIES <- Data_FIES %>%
# Place the dependent variable in the first column and delete the unique value
select(Total.Number.of.Family.members, everything(), -Region) %>%
# Convert categorical variables into factors
mutate(
Household.Head.Sex = as.factor(Household.Head.Sex),
Type.of.Household = as.factor(Type.of.Household),
Electricity = as.factor(Electricity)) %>%
# Remove Missing Values
drop_na()
# Chunk 3
str(FIES) # Check data structure
summary(FIES) # Get summary statistics of all variables
dim(FIES) # Check dataset dimensions (number of rows and columns)
# Chunk 4: tbl-y
#| label: tbl-y
#| tbl-cap: Summary statistics for 'Total.Number.of.Family.members'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n()
) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
# Chunk 5: fig-y
#| label: fig-y
#| fig-cap: Histogram of 'Total.Number.of.Family.members'
# Visualize dependent variable distribution
ggplot(FIES, aes(x = Total.Number.of.Family.members)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(x = "Number of Family Members", y = "Frequency")
# Chunk 6
var <- var(FIES$Total.Number.of.Family.members)
mean <- mean(FIES$Total.Number.of.Family.members)
var_ratio <- var/mean
# Chunk 7: tbl-y-sex
#| label: tbl-y-sex
#| tbl-cap: Summary statistics on 'Total.Number.of.Family.members' by 'Household.Head.Sex'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n(),
.by = Household.Head.Sex) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
# Chunk 8: fig-y-sex
#| label: fig-y-sex
#| fig-cap: Boxplot of 'Total.Number.of.Family.members' by 'Household.Head.Sex'
ggplot(FIES, aes(x = Household.Head.Sex, y = Total.Number.of.Family.members, fill = Household.Head.Sex)) +
geom_boxplot() +
labs(x = "Household Head's Gender", y = "Family Size")
# Chunk 9: tbl-y-household
#| label: tbl-y-household
#| tbl-cap: Summary statistics on 'Total.Number.of.Family.members' by 'Type.of.Household'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n(),
.by = Type.of.Household) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
# Chunk 10: fig-y-household
#| label: fig-y-household
#| fig-cap: Boxplot of 'Total.Number.of.Family.members' by 'Type.of.Household'
ggplot(FIES, aes(x = Type.of.Household, y = Total.Number.of.Family.members, fill = Type.of.Household)) +
geom_boxplot() +
labs(x = "Household Type", y = "Family Size")
# Chunk 11: tbl-y-electricity
#| label: tbl-y-electricity
#| tbl-cap: Summary statistics on 'Total.Number.of.Family.members' by 'Electricity'
#| tbl-cap-location: top
FIES |>
summarize('Mean' = mean(Total.Number.of.Family.members),
'Median' = median(Total.Number.of.Family.members),
'St.Dev' = sd(Total.Number.of.Family.members),
'Min' = min(Total.Number.of.Family.members),
'Max' = max(Total.Number.of.Family.members),
'IQR' = quantile(Total.Number.of.Family.members,0.75)-quantile(Total.Number.of.Family.members,0.25),
'Sample_size' = n(),
.by = Electricity) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
# Chunk 12: fig-y-electricity
#| label: fig-y-electricity
#| fig-cap: Boxplot of 'Total.Number.of.Family.members' by 'Electricity'
ggplot(FIES, aes(x = Electricity, y = Total.Number.of.Family.members, fill = Electricity)) +
geom_boxplot() +
labs(x = "Electricity (0 = No, 1 = Yes)", y = "Family Size")
# Chunk 13: fig-his-num
#| label: fig-his-num
#| fig-cap: Histograms for Numerical Variables
p1 <- ggplot(FIES, aes(x = Total.Household.Income)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Household Income Distribution", x = "Household Income", y = "Count")
p2 <- ggplot(FIES, aes(x = Total.Food.Expenditure)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Household Expenditure Distribution", x = "Household Expenditure", y = "Count")
p3 <- ggplot(FIES, aes(x = Household.Head.Age)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Household Head Age Distribution", x = "Household Head Age", y = "Count")
p4 <- ggplot(FIES, aes(x = House.Floor.Area)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "House Floor Area Distribution", x = "House Floor Area", y = "Count")
p5 <- ggplot(FIES, aes(x = House.Age)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "House Age Distribution", x = "House Age", y = "Count")
p6 <- ggplot(FIES, aes(x = Number.of.bedrooms)) +
geom_histogram(fill = "steelblue", color = "black", bins = 30) +
labs(title = "Number of bedrooms Distribution", x = "Number of bedrooms", y = "Count")
(p1 | p2 | p3) / (p4 | p5 | p6)
# Chunk 14
#remove############################
# Convert 'House.Age' to categorical variable
FIES$House.Age.Group <- cut(FIES$House.Age, breaks=c(0,10,30,100), labels=c("New","Middle","Old"))
# Convert categorical variable into factor
FIES$House.Age.Group <- factor(FIES$House.Age.Group)
# Remove the 'House.Age' column
FIES <- FIES %>% select(-House.Age)
# Chunk 15
# Convert 'Number.of.bedrooms' to categorical variable
FIES$Bedroom.Category <- cut(FIES$Number.of.bedrooms,
breaks = c(-1, 1, 3, 5, Inf),
labels = c("Small", "Medium", "Large", "Luxury"),right = TRUE)
# Convert categorical variable into factor
FIES$Bedroom.Category <- factor(FIES$Bedroom.Category)
# Remove the 'Number.of.bedrooms' column
FIES <- FIES %>% select(-Number.of.bedrooms)
# Chunk 16: fig-corr-num
#| label: fig-corr-num
#| fig-cap: Heat map for numerical variables by 'Total.Number.of.Family.members'
# Select all numerical variables
numeric_vars <- FIES[, sapply(FIES, is.numeric)]
# Since our dependent variable is a count varaible, use Spearman method
cor_matrix <- cor(numeric_vars, method = "spearman")
# Plot the correlation heatmap
ggcorrplot(cor_matrix, type = "full", lab = TRUE, lab_size = 4,
colors = c("blue", "white", "orange"), outline.color = "black",
legend.title = "Correlation") +
labs(title = "Correlation Matrix for Numeric Variables") +
theme(
axis.text.x = element_text(size = 9, angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(size = 9),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16)
)
# Chunk 17
# Fit a Poisson regression model
colnames(FIES) <- c("Family_Size", "Income", "Food_Exp", "Head_Sex", "Head_Age","Household_Type", "Floor_Area", "House_Age", "Bedrooms", "Electricity")
poisson_model <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(Floor_Area) +
log(House_Age+0.1) +
Bedrooms +
Electricity,
family = poisson(link = "log"),
data = FIES)
#summary(poisson_model)
drop1(poisson_model, test = "F")
FIES$Bedroom.Category <- cut(FIES$Bedrooms,
breaks = c(-1, 1, 3, Inf),
labels = c("Small", "Medium", "Large"),
right = TRUE)
str(FIES)
# Read the data set
Data_FIES <- read.csv("dataset03.csv")
# Tidy the data
FIES <- Data_FIES %>%
# Place the dependent variable in the first column and delete the unique value
select(Total.Number.of.Family.members, everything(), -Region) %>%
# Convert categorical variables into factors
mutate(
Household.Head.Sex = as.factor(Household.Head.Sex),
Type.of.Household = as.factor(Type.of.Household),
Electricity = as.factor(Electricity)) %>%
# Remove Missing Values
drop_na()
FIES_saved <- FIES
# Fit a Poisson regression model
FIES <- FIES_saved
colnames(FIES) <- c("Family_Size", "Income", "Food_Exp", "Head_Sex", "Head_Age","Household_Type", "Floor_Area", "House_Age", "Bedrooms", "Electricity")
poisson_model <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(Floor_Area) +
log(House_Age+0.1) +
Bedrooms +
Electricity,
family = poisson(link = "log"),
data = FIES)
#summary(poisson_model)
drop1(poisson_model, test = "F")
FIES$Bedroom.Category <- cut(FIES$Bedrooms,
breaks = c(-1, 1, 3, Inf),
labels = c("Small", "Medium", "Large"),
right = TRUE)
FIES$Bedroom.Category <- factor(FIES$Bedroom.Category)
model_cat <- lm(Family_Size ~ Bedroom.Category, data = FIES)
summary(model_cat)
catpoisson_model <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(Floor_Area) +
log(House_Age+1) +
Bedroom.Category +
Electricity,
family = poisson(link = "log"),
data = FIES)
summary(catpoisson_model)
drop1(catpoisson_model, test = "F")
FIES$Bedroom.Category <- cut(FIES$Bedrooms,
breaks = c(-1, 1, 3, Inf),
labels = c("Small", "Medium", "Large"),
right = TRUE)
FIES$Bedroom.Category <- factor(FIES$Bedroom.Category)
model_cat <- lm(Family_Size ~ Bedroom.Category, data = FIES)
summary(model_cat)
catpoisson_model <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(House_Age+1) +
Bedroom.Category +
Electricity,
family = poisson(link = "log"),
data = FIES)
summary(catpoisson_model)
drop1(catpoisson_model, test = "F")
poisson_model2 <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(House_Age+1) +
Electricity,
family = poisson(link = "log"),
data = FIES)
summary(poisson_model2)
X2 <- sum(resid(poisson_model2, type = "pearson")^2)
dp <- X2 / poisson_model2$df.res
summary(poisson_model2, dispersion = dp)
pred <- predict(poisson_model2, type = "response")
stand.resid <- rstandard(model = poisson_model2, type = "pearson") # Standardised Pearson residuals
par(mfrow=c(1,2))
plot(x = pred, y = stand.resid, xlab = "Predicted count", ylab = "Standardised Pearson residuals",
main = "Regular likelihood", ylim = c(-5,5))
abline(h = c(-3,-2, 0, 2, 3), lty = "dotted", col = "red")
X2 <- sum(resid(poisson_model2, type = "pearson")^2)
dp <- X2 / poisson_model2$df.res
summary(poisson_model2, dispersion = dp)
pred <- predict(poisson_model2, type = "response")
stand.resid <- rstandard(model = poisson_model2, type = "pearson") # Standardised Pearson residuals
par(mfrow=c(1,2))
plot(x = pred, y = stand.resid, xlab = "Predicted count", ylab = "Standardised Pearson residuals",
main = "Regular likelihood", ylim = c(-5,5))
abline(h = c(-3,-2, 0, 2, 3), lty = "dotted", col = "red")
poisson_model3 <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(House_Age+1) +
Electricity,
family = quasipoisson(link = "log"),
data = FIES)  # Quasi-Poisson model
pred <- predict(poisson_model3, type = "response")
stand.resid <- rstandard(model = poisson_model3, type = "pearson") # Standardised Pearson residuals
plot(x = pred, y = stand.resid, xlab = "Predicted count", ylab = "Standardised Pearson residuals",
main = "Quasi-likelihood", ylim = c(-5,5))
abline(h = c(-3,-2, 0, 2, 3), lty = "dotted", col = "red")
p1 <- ggplot(data.frame(sample = resp), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Pearson Residuals")
resp<-resid(poisson_model2,type= "pearson")
resd<-resid(poisson_model2,type= "deviance")
p1 <- ggplot(data.frame(sample = resp), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Pearson Residuals")
p2 <- ggplot(data.frame(sample = resd), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Deviance Residuals")
p3 <- ggplot(data.frame(predictor = predict(negbin_model, type = "link"), residuals = resd),
aes(x = predictor, y = residuals)) +
geom_jitter(color = "#7fc97f",width = 0.5, height = 0.5) +
ylab("Deviance Residuals") +
xlab("Linear Predictor")
resp<-resid(poisson_model2,type= "pearson")
resd<-resid(poisson_model2,type= "deviance")
p1 <- ggplot(data.frame(sample = resp), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Pearson Residuals")
p2 <- ggplot(data.frame(sample = resd), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Deviance Residuals")
p3 <- ggplot(data.frame(predictor = predict(poisson_model2, type = "link"), residuals = resd),
aes(x = predictor, y = residuals)) +
geom_jitter(color = "#7fc97f",width = 0.5, height = 0.5) +
ylab("Deviance Residuals") +
xlab("Linear Predictor")
grid.arrange(p1, p2, p3, nrow = 1)
p4 <- ggplot(poisson_model2,aes(x=log(fitted(poisson_model2)), y=log((FIES$Family_Size-fitted(poisson_model2))^2)))+
geom_jitter(col="#f46d43",width = 0.5, height = 0.5)+
geom_abline(slope=1,intercept=0,col="#a6d96a",size=1)+
ylab(expression((y-hat(mu))^2))+xlab(expression(hat(mu)))
p5 <- ggplot(poisson_model2, aes(x = log(fitted(poisson_model2)), y = residuals(poisson_model2, type = "pearson"))) +
geom_jitter(color = "#f46d43",width = 0.5, height = 0.5) +
geom_abline(slope = 0, intercept = 0, col = "#a6d96a", linewidth = 1) +
ylab("Pearson Residuals") + xlab(expression(hat(mu)))
grid.arrange(p4, p5, nrow = 1)
resp<-resid(poisson_model2,type= "pearson")
resd<-resid(poisson_model2,type= "deviance")
p1 <- ggplot(data.frame(sample = resp), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Pearson Residuals")
p2 <- ggplot(data.frame(sample = resd), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Deviance Residuals")
p5 <- ggplot(poisson_model2, aes(x = log(fitted(poisson_model2)), y = residuals(poisson_model2, type = "pearson"))) +
geom_jitter(color = "#f46d43",width = 0.5, height = 0.5) +
geom_abline(slope = 0, intercept = 0, col = "#a6d96a", linewidth = 1) +
ylab("Pearson Residuals") + xlab(expression(hat(mu)))
grid.arrange(p1/p2, p3, nrow = 1)
grid.arrange(p1/p2, p3, nrow = 2)
resp<-resid(poisson_model2,type= "pearson")
resd<-resid(poisson_model2,type= "deviance")
p1 <- ggplot(data.frame(sample = resp), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Pearson Residuals")
p2 <- ggplot(data.frame(sample = resd), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Deviance Residuals")
p5 <- ggplot(poisson_model2, aes(x = log(fitted(poisson_model2)), y = residuals(poisson_model2, type = "pearson"))) +
geom_jitter(color = "#f46d43",width = 0.5, height = 0.5) +
geom_abline(slope = 0, intercept = 0, col = "#a6d96a", linewidth = 1) +
ylab("Pearson Residuals") + xlab(expression(hat(mu)))
grid.arrange(arrangeGrob(p1, p2, ncol = 1), p5, ncol = 2)
resp<-resid(poisson_model2,type= "pearson")
resd<-resid(poisson_model2,type= "deviance")
p1 <- ggplot(data.frame(sample = resp), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Pearson Residuals")
p2 <- ggplot(data.frame(sample = resd), aes(sample = sample)) +
geom_point(stat = "qq", color = "#7fc97f") +
ylab("Deviance Residuals")
p3 <- ggplot(poisson_model2, aes(x = log(fitted(poisson_model2)), y = residuals(poisson_model2, type = "pearson"))) +
geom_jitter(color = "#f46d43",width = 0.5, height = 0.5) +
geom_abline(slope = 0, intercept = 0, col = "#a6d96a", linewidth = 1) +
ylab("Pearson Residuals") + xlab(expression(hat(mu)))
grid.arrange(arrangeGrob(p1, p2, ncol = 1), p3, ncol = 2)
X2 <- sum(resid(poisson_model2, type = "pearson")^2)
dp <- X2 / poisson_model2$df.res
summary(poisson_model2, dispersion = dp)
pred <- predict(poisson_model2, type = "response")
stand.resid <- rstandard(model = poisson_model2, type = "pearson") # Standardised Pearson residuals
par(mfrow=c(1,2))
plot(x = pred, y = stand.resid, xlab = "Predicted count", ylab = "Standardised Pearson residuals",
main = "Regular likelihood", ylim = c(-5,5))
abline(h = c(-3,-2, 0, 2, 3), lty = "dotted", col = "red")
poisson_model3 <- glm(Family_Size ~
log(Income) +
log(Food_Exp) +
Head_Sex +
Head_Age +
Household_Type +
log(House_Age+1) +
Electricity,
family = quasipoisson(link = "log"),
data = FIES)  # Quasi-Poisson model
pred <- predict(poisson_model3, type = "response")
stand.resid <- rstandard(model = poisson_model3, type = "pearson") # Standardised Pearson residuals
plot(x = pred, y = stand.resid, xlab = "Predicted count", ylab = "Standardised Pearson residuals",
main = "Quasi-likelihood", ylim = c(-5,5))
abline(h = c(-3,-2, 0, 2, 3), lty = "dotted", col = "red")
model1 <- glm(Family_Size ~ log(Income) * log(Food_Exp) +
Head_Sex + Head_Age + Household_Type +
log(House_Age + 1) + Electricity,
data = FIES)
anova(poisson_model2, model1, test = "LRT")
# Check the Relative Risk(RR)
exp(coef(model1))
# For Poission Regression, coefficients represent log-relative risk, so convert them to RR
model1 <- glm(Family_Size ~ log(Income) * log(Food_Exp) +
Head_Sex + Head_Age + Household_Type +log(House_Age + 1) + Electricity, family = poisson(link = "log"),data = FIES)
anova(poisson_model2, model1, test = "LRT")
# Check the Relative Risk(RR)
exp(coef(model1))
# For Poission Regression, coefficients represent log-relative risk, so convert them to RR
